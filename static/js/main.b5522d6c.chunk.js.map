{"version":3,"sources":["business/common/changeStateTextLoaded.ts","business/common/handleKeyPress.ts","business/common/changeTime.ts","business/reducer.ts","App.provider.tsx","components/StatusItem.tsx","features/StausList.tsx","features/TextBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["changeStateTextLoaded","state","initialString","leftedString","substr","currentLetter","charAt","stringLoaded","stringItem","filledString","isMistake","value","handleKeyPress","enteredLetter","ishHandledKey","length","isCorrectLetter","isFirstKeyPress","amountEnteredLetter","newCurrentLetter","newLeftedString","newFilledString","newState","time","Date","now","timeStarted","getTime","initialTime","currTime","timeInterval","Math","round","initialState","reducer","action","type","payload","AppContext","React","createContext","undefined","useAppContext","appContext","useContext","Error","StatusItemWrap","styled","div","StatusBlock","StatusValueWrap","StatusName","StatusValue","StatusMeasure","StatusItem","props","name","toUpperCase","measure","StatusListWrap","StatusList","dispatch","speed","getSpeed","accuracy","getAccuracy","accuracyStep","Number","toFixed","TextBlockWrap","FilledSpan","span","LeftedSpan","CaretSpan","isMistaken","TextBlock","id","Container","TrainingField","App","useReducer","useEffect","handler","event","key","document","addEventListener","removeEventListener","fetch","mode","headers","then","res","text","result","error","console","log","timerInterval","setInterval","clearInterval","Provider","getTextBlock","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5522d6c.chunk.js","sourcesContent":["import { ActionType, State } from \"../types.ts\";\r\n\r\nexport const changeStateTextLoaded = (\r\n  state: State,\r\n  initialString: string\r\n): State => {\r\n  const leftedString = initialString.substr(1);\r\n  const currentLetter = initialString.charAt(0);\r\n  const initialState: State = {\r\n    ...state,\r\n    stringLoaded: true,\r\n    stringItem: {\r\n      filledString: \"\",\r\n      leftedString: leftedString,\r\n      currentLetter: { isMistake: false, value: currentLetter },\r\n    },\r\n  };\r\n  return initialState;\r\n};\r\n","import {\r\n  CurrentLetterType,\r\n  StringItemType,\r\n  State,\r\n  ActionType,\r\n} from \"../types.ts\";\r\n\r\nexport const handleKeyPress = (state: State, enteredLetter: string) => {\r\n  const { filledString, leftedString, currentLetter } = state.stringItem;\r\n\r\n  /**\r\n   * Any symbol with lenght 1\r\n   */\r\n  const ishHandledKey = enteredLetter.length === 1;\r\n\r\n  const isCorrectLetter = currentLetter.value === enteredLetter;\r\n  const isFirstKeyPress = state.amountEnteredLetter === 0;\r\n  switch (ishHandledKey) {\r\n    case false: {\r\n      return state;\r\n    }\r\n    case true: {\r\n      switch (isCorrectLetter) {\r\n        case true: {\r\n          const newCurrentLetter = leftedString.charAt(0);\r\n          const newLeftedString = leftedString.substr(1);\r\n          const newFilledString = filledString + enteredLetter;\r\n\r\n          const newState: State = {\r\n            ...state,\r\n            stringItem: {\r\n              filledString: newFilledString,\r\n              leftedString: newLeftedString,\r\n              currentLetter: { isMistake: false, value: newCurrentLetter },\r\n            },\r\n            amountEnteredLetter: state.amountEnteredLetter + 1,\r\n          };\r\n          switch (isFirstKeyPress) {\r\n            case true: {\r\n              return {\r\n                ...newState,\r\n                time: Date.now(),\r\n                timeStarted: true,\r\n              };\r\n            }\r\n            case false:\r\n              return newState;\r\n          }\r\n        }\r\n        case false: {\r\n          const newState: State = {\r\n            ...state,\r\n            stringItem: {\r\n              ...state.stringItem,\r\n              currentLetter: {\r\n                ...state.stringItem.currentLetter,\r\n                isMistake: true,\r\n              },\r\n            },\r\n            amountEnteredLetter: state.amountEnteredLetter + 1,\r\n          };\r\n          switch (isFirstKeyPress) {\r\n            case true: {\r\n              return {\r\n                ...newState,\r\n                time: Date.now(),\r\n                timeStarted: true,\r\n              };\r\n            }\r\n            case false:\r\n              return newState;\r\n          }\r\n        }\r\n        default: {\r\n          return state;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n","import { State } from \"../types.ts\";\r\n\r\nexport const getTime = (state: State, initialTime: number): State => {\r\n  const currTime = Date.now();\r\n  const timeInterval = Math.round((currTime - initialTime) / 1000);\r\n  return { ...state, time: timeInterval };\r\n};\r\n","import { handleKeyPress, changeStateTextLoaded } from \"./common\";\r\nimport { getTime } from \"./common/changeTime\";\r\nimport { ActionType, State } from \"./types.ts\";\r\n\r\nexport const initialState: State = {\r\n  timeStarted: false,\r\n  stringLoaded: false,\r\n  stringItem: {\r\n    filledString: \"\",\r\n    leftedString: \"\",\r\n    currentLetter: {\r\n      value: \"\",\r\n      isMistake: false,\r\n    },\r\n  },\r\n  amountEnteredLetter: 0,\r\n  time: 0,\r\n};\r\n\r\nexport const reducer = (\r\n  state: State = initialState,\r\n  action: ActionType\r\n): State => {\r\n  switch (action.type) {\r\n    case \"dataLoaded\": {\r\n      const initialString = action.payload;\r\n      return changeStateTextLoaded(state, initialString);\r\n    }\r\n    case \"keyClicked\": {\r\n      const enteredLetter = action.payload;\r\n      return handleKeyPress(state, enteredLetter);\r\n    }\r\n    case \"timeUpdate\": {\r\n      const initialTime = action.payload;\r\n      return getTime(state, initialTime);\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { ActionType, State } from \"./business/types.ts\";\r\n\r\nexport const AppContext = React.createContext<{\r\n  state: State;\r\n  dispatch: React.Dispatch<ActionType>;\r\n}>(undefined as any);\r\n\r\nexport const useAppContext = () => {\r\n  const appContext = useContext(AppContext);\r\n\r\n  if (appContext === undefined) {\r\n    throw new Error(\"Using AppContext outside of AppContext.Provider!\");\r\n  }\r\n\r\n  return appContext;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nconst StatusItemWrap = styled.div`\r\n  display: grid;\r\n`;\r\n\r\nconst StatusBlock = styled.div`\r\n  font-family: sans-serif;\r\n  font-size: 14px;\r\n  line-height: 36px;\r\n  letter-spacing: 0.8px;\r\n  color: #b5bbc2;\r\n`;\r\n\r\nconst StatusValueWrap = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n`;\r\n\r\nconst StatusName = styled(StatusBlock)`\r\n  text-align: center;\r\n`;\r\n\r\nconst StatusValue = styled(StatusBlock)`\r\n  font-size: 30px;\r\n  color: rgb(85, 197, 255);\r\n`;\r\nconst StatusMeasure = styled(StatusBlock)`\r\n  font-size: 18px;\r\n  color: rgb(85, 197, 255);\r\n  flex-wrap: nowrap;\r\n  letter-spacing: -1.5px;\r\n  padding-left: 2px;\r\n  line-height: 46px;\r\n`;\r\n\r\ntype StatusItemType = {\r\n  name: string;\r\n  value: number;\r\n  measure: string;\r\n};\r\n\r\nexport const StatusItem = (props: StatusItemType) => {\r\n  return (\r\n    <StatusItemWrap>\r\n      <StatusName>{props.name.toUpperCase()}</StatusName>\r\n      <StatusValueWrap>\r\n        <StatusValue>{props.value}</StatusValue>\r\n        <StatusMeasure>{props.measure}</StatusMeasure>\r\n      </StatusValueWrap>\r\n    </StatusItemWrap>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\nimport { useAppContext } from \"../App.provider\";\r\nimport { StringItemType } from \"../business/types.ts\";\r\nimport { StatusItem } from \"../components/StatusItem\";\r\n\r\nconst StatusListWrap = styled.div`\r\n  display: grid;\r\n  width: 124px;\r\n  height: 240px;\r\n  padding: 30px 45px 30px 0;\r\n`;\r\n\r\nexport const StatusList = () => {\r\n  const { state, dispatch } = useAppContext();\r\n  const { stringItem, amountEnteredLetter, time } = state;\r\n\r\n  const speed = getSpeed(stringItem, time);\r\n  const accuracy = getAccuracy(stringItem, amountEnteredLetter);\r\n  return (\r\n    <StatusListWrap>\r\n      <StatusItem\r\n        name={\"скорость\"}\r\n        value={speed}\r\n        measure={\"зн./мин\"}\r\n      ></StatusItem>\r\n      <StatusItem name={\"точность\"} value={accuracy} measure={\"%\"}></StatusItem>\r\n    </StatusListWrap>\r\n  );\r\n};\r\n\r\nconst getSpeed = (stringItem: StringItemType, time: number) => {\r\n  const { filledString } = stringItem;\r\n  const speed = Math.round((filledString.length * 60) / time);\r\n  return speed || 0;\r\n};\r\n\r\nconst getAccuracy = (\r\n  stringItem: StringItemType,\r\n  amountEnteredLetter: number\r\n): number => {\r\n  const { filledString, leftedString } = stringItem;\r\n\r\n  const textString = filledString + leftedString;\r\n\r\n  const accuracyStep = Number((100 / textString.length).toFixed(1));\r\n\r\n  const accuracy =\r\n    100 - (amountEnteredLetter - filledString.length) * accuracyStep;\r\n\r\n  return accuracy;\r\n};\r\n","import styled from \"styled-components\";\r\nimport { useAppContext } from \"../App.provider\";\r\nimport { StringItemType } from \"../business/types.ts\";\r\nimport { StatusItem } from \"../components/StatusItem\";\r\n\r\nconst TextBlockWrap = styled.div`\r\n  width: 780px;\r\n  padding: 30px 45px;\r\n  font-family: sans-serif;\r\n  font-size: 24px;\r\n  line-height: 36px;\r\n  letter-spacing: 0.8px;\r\n`;\r\n\r\nconst FilledSpan = styled.span`\r\n  color: #3855c5;\r\n`;\r\n\r\nconst LeftedSpan = styled.span`\r\n  color: #808080;\r\n`;\r\n\r\ntype Carettype = {\r\n  isMistaken?: boolean;\r\n};\r\n\r\nconst CaretSpan = styled.span<Carettype>`\r\n  color: #ffffff;\r\n  padding: 1px;\r\n  background-color: ${(props) => {\r\n    switch (props.isMistaken) {\r\n      case true: {\r\n        return \"red\";\r\n      }\r\n      case false: {\r\n        return \"#3855c5\";\r\n      }\r\n      default: {\r\n        return \"none\";\r\n      }\r\n    }\r\n  }};\r\n  border: ${(props) => {\r\n    switch (props.isMistaken) {\r\n      case true: {\r\n        return \"1px solid red;\";\r\n      }\r\n      case false: {\r\n        return \"1px solid #3855c5;\";\r\n      }\r\n      default: {\r\n        return \"none\";\r\n      }\r\n    }\r\n  }};\r\n\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport const TextBlock = () => {\r\n  const { state, dispatch } = useAppContext();\r\n  return (\r\n    <TextBlockWrap>\r\n      <FilledSpan>{state.stringItem.filledString}</FilledSpan>\r\n      <CaretSpan isMistaken={state.stringItem.currentLetter.isMistake}>\r\n        {state.stringItem.currentLetter.value}\r\n      </CaretSpan>\r\n      <LeftedSpan id=\"leftedString\">{state.stringItem.leftedString}</LeftedSpan>\r\n    </TextBlockWrap>\r\n  );\r\n};\r\n","import { useEffect, useReducer } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { initialState, reducer } from \"./business/reducer\";\r\n\r\nimport { AppContext } from \"./App.provider\";\r\nimport { StatusList, TextBlock } from \"./features\";\r\nimport \"./index.css\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n`;\r\n\r\nconst TrainingField = styled.div`\r\n  display: flex;\r\n  align-items: stretch;\r\n  margin: 150px auto 0 auto;\r\n\r\n  border-radius: 14px;\r\n  background-color: white;\r\n`;\r\n\r\nexport const App = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  useEffect(() => {\r\n    const handler = (event: KeyboardEvent) => {\r\n      dispatch({ type: \"keyClicked\", payload: event.key });\r\n    };\r\n    document.addEventListener(\"keyup\", handler);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"keyup\", handler);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://baconipsum.com/api/?callback=?type=all-meat&paras=1&format=text&t=${new Date()}`,\r\n      {\r\n        mode: \"cors\",\r\n        headers: {\r\n          \"Content-type\": \"application/json; charset=utf-8\",\r\n        },\r\n      }\r\n    )\r\n      .then((res) => res.text())\r\n      .then(\r\n        (result) => {\r\n          dispatch({ type: \"dataLoaded\", payload: result });\r\n        },\r\n\r\n        (error) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timerInterval = setInterval(() => {\r\n      if (state.timeStarted)\r\n        dispatch({ type: \"timeUpdate\", payload: state.time });\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(timerInterval);\r\n    };\r\n  }, [state.timeStarted]);\r\n\r\n  const getTextBlock = () => {\r\n    switch (state.stringLoaded) {\r\n      case false: {\r\n        return null;\r\n      }\r\n      case true: {\r\n        return (\r\n          <TrainingField>\r\n            <TextBlock></TextBlock>\r\n            <StatusList />\r\n          </TrainingField>\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={{ state, dispatch }}>\r\n      <Container id=\"container\">{getTextBlock()}</Container>\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}